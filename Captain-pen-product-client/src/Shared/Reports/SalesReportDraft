import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../../Loader/Loader";
import { CSVLink } from "react-csv";
import { DateRangePicker } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";

const SalesReport = () => {
  const username = localStorage.getItem("username");
  const role = localStorage.getItem("role");
  const userId = localStorage.getItem("user_id");
  const name = localStorage.getItem("name");
  const navigate = useNavigate();
  const [sales, SetSales] = useState([]);
  const [users, setUsers] = useState([]);
  const [shops, setShops] = useState([]);
  const [adminUsers,setAdminUsers] = useState([]);
  const [asmUsers,setAsmUsers] = useState([]);
  const [sRUsers,setSRUsers] = useState([]);
  const [products, setProducts] = useState([]);
  const [fullName, setFullName] = useState("");
  const [transactions, setTransactions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [region, setRegion] = useState([]);
  const [filterShopData, setFilterShopData] = useState([]);
  const [filteredShop,setFilteredShop] = useState(null);
  const [filteredZone,setFilteredZone] = useState(null);
  const [filteredAdmin,setFilteredAdmin] = useState(null);
  const [filteredASM,setFilteredASM] = useState(null);
  const [filteredSR,setFilteredSR] = useState(null);
  let salesExcel = [];
  const [showCalendar, setShowCalendar] = useState(false);
  const [state, setState] = useState([
    {
      startDate: null,
      endDate: null,
      key: "selection",
    },
  ]);

  let unitPrice;
  let serial = 1;
  const setExcelDataBundle = (sales) => {
    
    
    sales.forEach((s) => {
      const singleItem = {};
      let flag = 0;
      singleItem.productName = [];
      singleItem.distributedAmount = [];
      singleItem.unitPrice = [];
      let managedBy;
      let admin;
      for (let i = 0; i < salesExcel.length; i++) {
        if (s.transaction_id === salesExcel[i].transactionId) {
          salesExcel[i].productName.push(s.product_name);
          salesExcel[i].distributedAmount.push(s.distributed_amount);
          salesExcel[i].unitPrice.push(s.price_per_unit);
          salesExcel[i].salesDescription = `${
            salesExcel[i].salesDescription
          }  \n   ${s.product_name} ${s.distributed_amount}*${
            s.price_per_unit
          } = ${
            parseFloat(s.price_per_unit) * parseFloat(s.distributed_amount)
          } `;
          salesExcel[i].totalPrice =
            parseFloat(salesExcel[i].totalPrice) +
            parseFloat(s.price_per_unit) * parseFloat(s.distributed_amount);
          unitPrice = products.filter(
            (p) => p.product_name === s.product_name
          )[0]?.unit_price;
          if (role === "0") {
            salesExcel[i].costDescription = `${
              salesExcel[i].costDescription
            } \n ${s.product_name}  ${s.distributed_amount}*${unitPrice}= ${
              parseFloat(unitPrice) * parseFloat(s.distributed_amount)
            }  `;
          }
          flag = 1;
        }
      }
      if (flag === 0) {
        singleItem.serialIndex = parseInt(s.transaction_id) + 1;
        singleItem.productName.push(s.product_name);
        singleItem.distributedAmount.push(s.distributed_amount);
        singleItem.unitPrice.push(s.price_per_unit);
        singleItem.transactionId = s.transaction_id;
        const seller = users.filter((u) => u._id === s.sender_id)[0];
        singleItem.srName = seller?.name;
        singleItem.shopName = shops.filter(
          (u) => u._id === s.reciever_id
        )[0]?.shop_name;
        singleItem.shopAddress = shops.filter(
          (u) => u._id === s.reciever_id
        )[0]?.address;
        singleItem.date = s.recieved_date;
        if (role === "0" || role === "1") {
          singleItem.zoneName = region.filter(
            (rg) => rg._id === seller?.region_id
          )[0]?.region_name;
          users.forEach((u) => {
            if (u._id === s.sender_id) {
              managedBy = u.managed_by;
            }
          });
        }
        if (role === "0" || role === "1") {
          singleItem.asmName = users.filter(
            (u) => u._id === managedBy
          )[0]?.name;
          users.forEach((u) => {
            if (u._id === managedBy) {
              admin = u.managed_by;
            }
          });
        }
        if (role === "0" || role === "1") {
          singleItem.adminName = users.filter((u) => u._id === admin)[0]?.name;
        }
        singleItem.discount = transactions.filter(
          (t) => t.transaction_id === s.transaction_id
        )[0]?.discount;
        singleItem.due = transactions.filter(
          (t) => t.transaction_id === s.transaction_id
        )[0]?.due;
        singleItem.cashCollection = "";
        transactions.forEach((tr) => {
          if (tr.transaction_id === s.transaction_id) {
            singleItem.cashCollection =
              parseFloat(tr.total_bill) - parseFloat(tr.due);
          }
        });
        singleItem.totalPrice =
          parseFloat(s.price_per_unit) * parseFloat(s.distributed_amount);
        singleItem.salesDescription = `${s.product_name}  ${
          s.distributed_amount
        }*${s.price_per_unit}= ${
          parseFloat(s.price_per_unit) * parseFloat(s.distributed_amount)
        }  `;
        unitPrice = products.filter((p) => p.product_name === s.product_name)[0]
          ?.unit_price;
        if (role === "0") {
          singleItem.costDescription = `${s.product_name}  ${
            s.distributed_amount
          }*${unitPrice}= ${
            parseFloat(unitPrice) * parseFloat(s.distributed_amount)
          }  `;
        }
        if (role === "1") {
          if (singleItem.adminName === name) {
            salesExcel.push(singleItem);
          }
        } else if (role === "2") {
          if (singleItem.asmName === name) {
            salesExcel.push(singleItem);
          }
        } else if (role === "3") {
          if (singleItem.srName === name) {
            salesExcel.push(singleItem);
          }
        } else {
          salesExcel.push(singleItem);
          salesExcel = salesExcel.filter(se=>se.zoneName===(filteredZone===null? se.zoneName : filteredZone) &&
          se.adminName===(filteredAdmin===null? se.adminName : filteredAdmin) &&
          se.asmName === (filteredASM===null? se.asmName : filteredASM) &&
          se.srName === (filteredSR===null? se.srName : filteredSR) && 
          se.shopName===(filteredShop===null? se.shopName : filteredShop) &&
          se.date<=(state[0].endDate===null? se.date : (convert(state[0].endDate)))  &&
          se.date>=(state[0].startDate===null? se.date : (convert(state[0].startDate))) 
          )
          
        }
      }
      flag = 0;
    });
    return salesExcel;
  };

  salesExcel= setExcelDataBundle(sales);
 function convert(str) {
    var date = new Date(str),
      mnth = ("0" + (date.getMonth() + 1)).slice(-2),
      day = ("0" + date.getDate()).slice(-2);
    return [date.getFullYear(), mnth, day].join("-");
  }
  const onChangeDate = (item) => {
    setState([item.selection]);
  };

  const forDate = () => {
    setShowCalendar(true);
  };
  const setCalendar = () => {
    setShowCalendar(false);
    if (state[0].startDate!==null && state[0].endDate!==null) {
      document.getElementById("date_range_show").value = convert(
        state[0].startDate
      )===convert(state[0].endDate)? `${convert(
        state[0].startDate
      )}`:`${convert(
        state[0].startDate
      )} - ${convert(state[0].endDate)}`;
    }

    // sales.forEach((s) => {
    //   if (
    //     s.recieved_date.split("T")[0] >= convert(state[0].startDate) &&
    //     s.recieved_date.split("T")[0] <= convert(state[0].endDate)
    //   ) {
    //     curData.push(s);
    //   }
    // });
  };
  const clearInput = ()=>{
    document.getElementById("date_range_show").value = "";
    setState([
      {
        startDate: null,
        endDate: null,
        key: "selection",
      },
    ]);
  }
  // = event =>{
  //   event.preventDefault();
  //   const isDateExist = document.getElementById("date_range_show").value!==""? document.getElementById("date_range_show").value : null  ;
  //   let filteredDate;
  //   if(isDateExist){
  //     filteredDate = state;
  //   }else{
  //     filteredDate = null;
  //   }
  //   fetch("http://localhost:5000/distributed-product-to-shop", {
  //     method: "GET",
  //     headers: {
  //       "content-type": "application/json",
  //     },
  //   })
  //     .then((res) => res.json())
  //     .then((data) => {
  //      if(data.length>0){
  //       const newSales = data.filter(
  //         (ps) =>
  //           ps.reciever_id ===
  //             (filteredShop !== null ? filteredShop : ps.reciever_id) &&
  //           ps.sender_id === (filteredSR !== null ? filteredSR : ps.sender_id) &&
  //           ps.recieved_date.split("T")[0] >=
  //             (filteredDate !== null
  //               ? convert(filteredDate[0].startDate)
  //               : ps.recieved_date.split("T")[0]) &&
  //           ps.recieved_date.split("T")[0] <= (filteredDate !== null
  //             ? convert(filteredDate[0].endDate) : ps.recieved_date.split("T")[0])) ;
    
  //       console.log(newSales);
  //       SetSales(newSales)
  //      }
  //     });
  //   // const newSales = prevSales.filter(
  //   //   (ps) =>
  //   //     ps.reciever_id ===
  //   //       (filteredShop !== null ? filteredShop : ps.reciever_id) &&
  //   //     ps.sender_id === (filteredSR !== null ? filteredSR : ps.sender_id) &&
  //   //     ps.recieved_date.split("T")[0] >=
  //   //       (filteredDate !== null
  //   //         ? convert(filteredDate[0].startDate)
  //   //         : ps.recieved_date.split("T")[0]) &&
  //   //     ps.recieved_date.split("T")[0] <= (filteredDate !== null
  //   //       ? convert(filteredDate[0].endDate) : ps.recieved_date.split("T")[0])) ;

  //   // console.log(newSales);
  //   // SetSales(newSales)
  //   //  salesExcel = setExcelDataBundle(sales);
  //   //  console.log("filter theke",salesExcel); 
  // }
  useEffect(() => {
    setIsLoading(true);
    if (
      username === undefined ||
      (role === "0" || role === "1" || role === "2" || role === "3") === false
    ) {
      localStorage.clear();
      navigate("/");
    }
    fetch(`http://localhost:5000/users`, {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        setIsLoading(false);
        setUsers(data);
        if (data.length > 0) {
          const uName = data.filter((d) => d._id === userId)[0]?.name;
          setFullName(uName);
          let asms = [];
          if (role === "0") {
            fetch(`http://localhost:5000/shop`, {
              method: "GET",
              headers: {
                "content-type": "application/json",
              },
            })
              .then((res) => res.json())
              .then((shopData) => {
                setFilterShopData(shopData);
              });
              setAdminUsers(data.filter((d) => d.role==='1'));
              setAsmUsers(data.filter((d) => d.role==='2'));
              setSRUsers(data.filter((d) => d.role==='3'));
          } else if (role === "1") {
            asms = data.filter((d) => d.managed_by === userId);
            let modifiedShopData = [];
            fetch(`http://localhost:5000/shop`, {
              method: "GET",
              headers: {
                "content-type": "application/json",
              },
            })
              .then((res) => res.json())
              .then((shopData) => {
                if (shopData.length > 0) {
                  for (let i = 0; i < asms.length; i++) {
                    for (let j = 0; j < shopData.length; j++) {
                      if (asms[i].region_id === shopData[j].region_id) {
                        modifiedShopData.push(shopData[j]);
                      }
                    }
                  }
                  setFilterShopData(modifiedShopData);
                }
              });
          } else {
            const region = data.filter((d) => d._id === userId)[0]?.region_id;
            fetch(`http://localhost:5000/shop?region_id=${region}`, {
              method: "GET",
              headers: {
                "content-type": "application/json",
              },
            })
              .then((res) => res.json())
              .then((shopData) => setFilterShopData(shopData));
          }

          setIsLoading(false);
        }
      });
      let a ={
        name:"afser"
      }
    fetch("http://localhost:5000/sales",{
      method:"POST",
      headers:{
        "content-type":"application/json"
      },
      body:JSON.stringify(a)
    }).then(res=>res.json())
    .then(data=>console.log(data))
    fetch(`http://localhost:5000/shop`, {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        setShops(data);
        setIsLoading(false);
      });
    fetch(`http://localhost:5000/product`, {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        setProducts(data);
        setIsLoading(false);
      });
    fetch(`http://localhost:5000/region`, {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        if(role==="0"){
        setRegion(data);
        }else{
          const mRegion = data.filter(d=>d.assigned===userId);
          setRegion(mRegion);
        }
        setIsLoading(false);
      });
    fetch(`http://localhost:5000/transaction`, {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        setTransactions(data);
        setIsLoading(false);
      });

    fetch("http://localhost:5000/distributed-product-to-shop", {
      method: "GET",
      headers: {
        "content-type": "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        setIsLoading(false);
        console.log(data);
        SetSales(data);
      });
  }, [username, navigate, userId, role]);
  return (
    <div>
      <div className="text-center">
        <p className="text-4xl font-bold mb-4">Sales</p>
      </div>
      {isLoading && <Loader></Loader>}
      <div className="my-3  px-0 lg:px-4 flex justify-between">
        <CSVLink
          data={salesExcel}
          filename={"sales.csv"}
          className="mt-3 btn bg-green-900 text-white "
          target="_blank"
        >
          Download{" "}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            className="ml-2 w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M12 2.25a.75.75 0 01.75.75v11.69l3.22-3.22a.75.75 0 111.06 1.06l-4.5 4.5a.75.75 0 01-1.06 0l-4.5-4.5a.75.75 0 111.06-1.06l3.22 3.22V3a.75.75 0 01.75-.75zm-9 13.5a.75.75 0 01.75.75v2.25a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5V16.5a.75.75 0 011.5 0v2.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V16.5a.75.75 0 01.75-.75z"
              clipRule="evenodd"
            />
          </svg>
        </CSVLink>

        <label htmlFor="my-modal" className="btn bg-green-900 text-white">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="w-5 h-5 mr-2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z"
            />
          </svg>
          Filters
        </label>
      </div>
      <div className="overflow-x-auto px-0 lg:px-4">
        <table className="overflow-x-scroll table-zebra w-full">
          <thead>
            <tr>
              <th>SI No</th>
              <th>Date</th>
              <th>Shop Name</th>
              <th>Shop Address</th>
              <th>Sales Description</th>
              <th>Discount</th>
              <th>Total Price</th>
              <th>Cash Collection</th>
              <th>Due Amount</th>
              {role === "0" && <th>Cost Description</th>}
              {(role === "0" || role === "1") && <th>Zone Name</th>}
              {role !== "3" && <th>SR Name</th>}
              {(role === "0" || role === "1") && <th>ASM Name</th>}
              {role === "0" && <th>Admin Name</th>}
              <th>Bill Image Links</th>
            </tr>
          </thead>
          <tbody>
            {salesExcel.length > 0 &&
              salesExcel.map((se) => {
                return (
                  role === "1" &&
                  se.adminName === fullName && (
                    <tr key={se.serialIndex}>
                      <td>{serial++}</td>
                      <td>{se.date.split("T")[0]}</td>
                      <td>{se.shopName}</td>
                      <td>{se.shopAddress}</td>
                      <td>
                        {se.salesDescription.split("\n").length > 0
                          ? se.salesDescription.split("\n").map((i, key) => {
                              return <div key={key}>{i}</div>;
                            })
                          : se.salesDescription}
                      </td>
                      <td>{se.discount}</td>
                      <td>{se.totalPrice}</td>
                      <td>{se.cashCollection}</td>
                      <td>{se.due}</td>
                      {role === "0" && (
                        <>
                          <td>
                            {se.costDescription.split("\n").length > 0
                              ? se.costDescription.split("\n").map((i, key) => {
                                  return <div key={key}>{i}</div>;
                                })
                              : se.costDescription}
                          </td>
                        </>
                      )}
                      {(role === "0" || role === "1") && (
                        <>
                          <td>{se.zoneName}</td>
                        </>
                      )}
                      <td>{se.srName}</td>
                      <td>{se.asmName}</td>
                      {role === "0" && <td>{se.adminName}</td>}
                      <td>
                        {transactions
                          .filter(
                            (tr) => tr.transaction_id === se.serialIndex - 1
                          )[0]
                          ?.bill_img?.map((b, idx) => {
                            return (
                              <div key={idx}>
                                <Link
                                  target="_blank"
                                  className="text-xl font-medium text-green-300 hover:text-white underline"
                                  to={`${b}`}
                                >{`Image -${idx + 1}`}</Link>
                              </div>
                            );
                          })}
                      </td>
                    </tr>
                  )
                );
              })}
            {role === "0" &&
              salesExcel.length > 0 &&
              salesExcel.map((se) => {
                return (
                  <tr key={se.serialIndex}>
                    <td>{serial++}</td>
                    <td>{se.date?.split("T")[0]}</td>
                    <td>{se.shopName}</td>
                    <td>{se.shopAddress}</td>
                    <td>
                      {se.salesDescription.split("\n").length > 0
                        ? se.salesDescription.split("\n").map((i, key) => {
                            return <div key={key}>{i}</div>;
                          })
                        : se.salesDescription}
                    </td>
                    <td>{se.discount}</td>
                    <td>{se.totalPrice}</td>
                    <td>{se.cashCollection}</td>
                    <td>{se.due}</td>
                    <>
                      <td>
                        {se.costDescription.split("\n").length > 0
                          ? se.costDescription.split("\n").map((i, key) => {
                              return <div key={key}>{i}</div>;
                            })
                          : se.costDescription}
                      </td>
                    </>
                    <td>{se.zoneName}</td>
                    <td>{se.srName}</td>
                    <td>{se.asmName}</td>
                    <td>{se.adminName}</td>
                    <td>
                      {transactions
                        .filter(
                          (tr) => tr.transaction_id === se.serialIndex - 1
                        )[0]
                        ?.bill_img?.map((b, idx) => {
                          return (
                            <div key={idx}>
                              <Link
                                target="_blank"
                                className="text-xl font-medium text-green-300 hover:text-white underline"
                                to={`${b}`}
                              >{`Image -${idx + 1}`}</Link>
                            </div>
                          );
                        })}
                    </td>
                  </tr>
                );
              })}
            {salesExcel.length > 0 &&
              salesExcel.map((se) => {
                return (
                  role === "2" &&
                  se.asmName === fullName && (
                    <tr key={serial++}>
                      <td>{se.serialIndex}</td>
                      <td>{se.date.split("T")[0]}</td>
                      <td>{se.shopName}</td>
                      <td>{se.shopAddress}</td>
                      <td>
                        {se.salesDescription.split("\n").length > 0
                          ? se.salesDescription.split("\n").map((i, key) => {
                              return <div key={key}>{i}</div>;
                            })
                          : se.salesDescription}
                      </td>
                      <td>{se.discount}</td>
                      <td>{se.totalPrice}</td>
                      <td>{se.cashCollection}</td>
                      <td>{se.due}</td>

                      {role === "0" && (
                        <>
                          <td>
                            {se.costDescription.split("\n").length > 0
                              ? se.costDescription.split("\n").map((i, key) => {
                                  return <div key={key}>{i}</div>;
                                })
                              : se.costDescription}
                          </td>
                        </>
                      )}
                      {(role === "0" || role === "1") && (
                        <>
                          <td>{se.zoneName}</td>
                        </>
                      )}
                      <td>{se.srName}</td>
                      <td>{se.asmName}</td>
                      {role === "0" && <td>{se.adminName}</td>}
                      <td>
                        {transactions
                          .filter(
                            (tr) => tr.transaction_id === se.serialIndex - 1
                          )[0]
                          ?.bill_img?.map((b, idx) => {
                            return (
                              <div key={idx}>
                                <Link
                                  target="_blank"
                                  className="text-xl font-medium text-green-300 hover:text-white underline"
                                  to={`${b}`}
                                >{`Image -${idx + 1}`}</Link>
                              </div>
                            );
                          })}
                      </td>
                    </tr>
                  )
                );
              })}
            {salesExcel.length > 0 &&
              salesExcel
                .slice(0)
                .reverse()
                .map((se) => {
                  return (
                    role === "3" &&
                    se.srName === fullName && (
                      <tr key={serial++}>
                        <td>{se.serialIndex}</td>
                        <td>{se.date.split("T")[0]}</td>
                        <td>{se.shopName}</td>
                        <td>{se.shopAddress}</td>
                        <td>
                          {se.salesDescription.split("\n").length > 0
                            ? se.salesDescription.split("\n").map((i, key) => {
                                return <div key={key}>{i}</div>;
                              })
                            : se.salesDescription}
                        </td>
                        <td>{se.discount}</td>
                        <td>{se.totalPrice}</td>
                        <td>{se.cashCollection}</td>
                        <td>{se.due}</td>
                        <td>
                          {transactions.length > 0 &&
                            transactions
                              .filter(
                                (tr) => tr.transaction_id === se.serialIndex - 1
                              )[0]
                              ?.bill_img?.map((b, idx) => {
                                return (
                                  <div key={idx}>
                                    <Link
                                      target="_blank"
                                      className="text-xl font-medium text-green-300 hover:text-white underline"
                                      to={`${b}`}
                                    >{`Image -${idx + 1}`}</Link>
                                  </div>
                                );
                              })}
                        </td>
                      </tr>
                    )
                  );
                })}
          </tbody>
        </table>
      </div>
      <input type="checkbox" id="my-modal" className="modal-toggle" />
      <div className="modal	">
        <div className="modal-box  w-11/12 max-w-5xl ">
          <h3 className="font-bold text-lg ">Filters</h3>
          <form className="my-4"> 
            <label htmlFor="">Select Shop</label><br />
            <select
              id="select_shop"
              className="input input-bordered w-full lg:w-1/2"
              placeholder="Select Shop"
              onChange={(e)=>setFilteredShop(e.target.value)}
            >
              <option value={null}></option>
              {filterShopData.length > 0 &&
                filterShopData.map((sh) => (
                  <option key={sh._id} value={sh.shop_name}>
                    {sh.shop_name}
                  </option>
                ))}
            </select><br />
            <label htmlFor="">Data Range</label> <br />
            <input type="text" id="date_range_show" onClick={forDate} className="input input-bordered w-full lg:w-1/2" defaultValue="" />
            <button className="btn bg-red-600 font-bold ml-2" onClick={clearInput}>Clear</button>
            {
              showCalendar && <div className=" flex flex-col">
              <DateRangePicker
                onChange={(item) => onChangeDate(item)}
                showSelectionPreview={true}
                moveRangeOnFirstSelection={true}
                ranges={state}
                editableDateInputs={true}
                direction="horizontal"
                staticRanges={[]}
              />
              <button className="btn btn-outline mt-2" onClick={() => setCalendar()}>
                {" "}
                Set
              </button>
            </div>
            }
            <br />
            {
              (role==="0" || role==="1") && <>
              <label htmlFor="">Zone</label> <br />
              <select
              id="select_region"
              className="input input-bordered w-full lg:w-1/2"
              placeholder="Select Zone"
              onChange={(e)=>setFilteredZone(e.target.value)}
            >
              <option value={null}></option>
              {region.length > 0 &&
                region.map((sh) => (
                  <option key={sh._id} value={sh.region_name}>
                    {sh.region_name}
                  </option>
                ))}
            </select>
            <br />
              </>
            }
            {
              (role==="0" ) && <>
              <label htmlFor="">Admin</label> <br />
              <select
              id="select_admin"
              className="input input-bordered w-full lg:w-1/2"
              placeholder="Select Admin"
              onChange={(e)=>setFilteredAdmin(e.target.value)}
            >
              <option value={null}></option>
              {adminUsers.length > 0 &&
                adminUsers.map((sh) => (
                  <option key={sh._id} value={sh.name}>
                    {sh.name}
                  </option>
                ))}
            </select>
            <br />
              </>
            }
            {
              (role==="0" || role==='1' ) && <>
              <label htmlFor="">ASM</label> <br />
              <select
              id="select_asm"
              className="input input-bordered w-full lg:w-1/2"
              placeholder="Select ASM"
              onChange={(e)=>setFilteredASM(e.target.value)}
            >
              <option value={null}></option>
              {asmUsers.length > 0 &&
                asmUsers.map((sh) => (
                  <option key={sh._id} value={sh.name}>
                    {sh.name}
                  </option>
                ))}
            </select>
            <br />
              </>
            }
            {
              (role!=="3" ) && <>
              <label htmlFor="">SR</label> <br />
              <select
              id="select_sr"
              className="input input-bordered w-full lg:w-1/2"
              placeholder="Select SR"
              onChange={(e)=>setFilteredSR(e.target.value)}
            >
              <option value={null}></option>
              {sRUsers.length > 0 &&
                sRUsers.map((sh) => (
                  <option key={sh._id} value={sh.name}>
                    {sh.name}
                  </option>
                ))}
            </select>
            <br />
              </>
            }
            <div className="mx-4 my-4 flex justify-end">
              <button  className="btn bg-green-900 text-white mr-2">Clear</button>
              <label htmlFor="my-modal" className="btn bg-red-900">
              Close
          </label>
            </div>
          </form>
        </div>
      </div>
      
    </div>
  );
};

export default SalesReport;
